generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

/// This model has been renamed to 'Renamedclass' during introspection, because the original name 'class' is reserved.
model Renamedclass {
  id        Int       @id @default(autoincrement())
  name      String
  majorId   Int
  createdAt DateTime  @default(now())
  updatedAt DateTime
  major     major     @relation(fields: [majorId], references: [id], onDelete: NoAction, map: "Class_majorId_fkey")
  student   student[]

  @@index([majorId], map: "Class_majorId_fkey")
  @@map("class")
}

model faculty {
  id        Int        @id @default(autoincrement())
  name      String
  createdAt DateTime   @default(now())
  updatedAt DateTime
  lecturer  lecturer[]
  major     major[]
  student   student[]
}

model lecturer {
  id              Int       @id @default(autoincrement())
  userId          Int       @unique(map: "Lecturer_userId_key")
  facultyId       Int?
  degree          String?
  specialization  String?
  position        String?
  status          String?
  statusUpdatedAt DateTime?
  stoppedAt       DateTime?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime
  faculty         faculty?  @relation(fields: [facultyId], references: [id], map: "Lecturer_facultyId_fkey")
  user            user      @relation(fields: [userId], references: [id], onDelete: NoAction, map: "Lecturer_userId_fkey")

  @@index([facultyId], map: "Lecturer_facultyId_fkey")
}

model major {
  id           Int            @id @default(autoincrement())
  name         String
  facultyId    Int
  createdAt    DateTime       @default(now())
  updatedAt    DateTime
  Renamedclass Renamedclass[]
  faculty      faculty        @relation(fields: [facultyId], references: [id], onDelete: NoAction, map: "Major_facultyId_fkey")
  student      student[]

  @@index([facultyId], map: "Major_facultyId_fkey")
}

model student {
  id              Int           @id @default(autoincrement())
  userId          Int           @unique(map: "Student_userId_key")
  classId         Int?
  facultyId       Int?
  majorId         Int?
  trainingLevel   String?
  status          String?
  statusUpdatedAt DateTime?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime
  Renamedclass    Renamedclass? @relation(fields: [classId], references: [id], map: "Student_classId_fkey")
  faculty         faculty?      @relation(fields: [facultyId], references: [id], map: "Student_facultyId_fkey")
  major           major?        @relation(fields: [majorId], references: [id], map: "Student_majorId_fkey")
  user            user          @relation(fields: [userId], references: [id], onDelete: NoAction, map: "Student_userId_fkey")

  @@index([classId], map: "Student_classId_fkey")
  @@index([facultyId], map: "Student_facultyId_fkey")
  @@index([majorId], map: "Student_majorId_fkey")
}

model user {
  id          Int       @id @default(autoincrement())
  userCode    String?   @unique(map: "User_userCode_key")
  fullName    String
  avatar      String?
  email       String    @unique(map: "User_email_key")
  password    String
  gender      String?
  dateOfBirth DateTime?
  phone       String?
  address     String?
  role        user_role @default(admin)
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  lecturer    lecturer?
  student     student?
}

enum user_role {
  student
  lecturer
  admin
}
